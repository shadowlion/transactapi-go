package transactapi

import (
	"bytes"
	"encoding/json"
	"net/http"
)

type GetCreditCardPayload struct {
	ClientID        string `json:"clientID"`
	DeveloperAPIKey string `json:"developerAPIKey"`
	AccountID       string `json:"accountId"`
}

type CreditCardDetails struct {
	AccountId        string `json:"accountId"`
	CreditCardName   string `json:"creditCardName"`
	CreditCardNumber string `json:"creditCardNumber"`
	ExpirationDate   string `json:"expirationDate"`
	CvvNumber        string `json:"cvvNumber"`
}

type GetCreditCardResponse struct {
	StatusCode        string            `json:"statusCode"`
	StatusDesc        string            `json:"statusDesc"`
	CreditCardDetails CreditCardDetails `json:"creditcardDetails"`
}

// # Get Credit Card
//
// This method is used to retrieve the credit card information that was
// previously saved to a specific account.
//
// ## Arguments
//
// - `accountId` - Account ID that is generated by the API once an account is
// created (createAccount).
func (c *client) GetCreditCard(accountId string) (*GetTradeResponse, error) {
	payload := GetCreditCardPayload{
		ClientID:        c.clientID,
		DeveloperAPIKey: c.developerApiKey,
		AccountID:       accountId,
	}

	jsonData, err := json.Marshal(payload)

	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(
		http.MethodPost,
		c.baseURL+"/getCreditCard",
		bytes.NewBuffer(jsonData),
	)

	if err != nil {
		return nil, err
	}

	var fullResponse GetTradeResponse

	if err := c.sendRequest(req, &fullResponse); err != nil {
		return nil, err
	}

	return &fullResponse, nil
}
